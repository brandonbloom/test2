=== Test2 Spec (1.0)

# You define tests
#
# There's two halfs of testing, writing tests and running them.
#
# - Defining tests
#   - Making assertions within them
#
# - Finding tests
#   - Filtering which ones to run
#   - Running them
#   - Reporting the results


This breaks down into four roles: Definer, Asserter, Runner, Reporter.


== Definer

There are just helpers to create test-fns. They're optional since it's
pretty easy to make a test-fn with just (defn ^:test some-test [] ...)


== Asserters

During execution of a test-fn, `*test-results*` is a ref to a
seq. Asserters are helper functions that should take some assertion,
evaluate it, and conj an assertion-result onto it.

Note: if an unexpected error occurred (not specified by the
assertion), the assertion-result's :status should be :error.


== Runner

A Runner is a function that takes a seq of test-fns and runs them. It
has several responsibilities:

takes a seq of test-fns and returns lazy seq of test-results

responsible for filtering

A function that takes a seq of



<!-- == Test Flow -->

<!-- 1. All test-fns are found and passed to `run-test-fns`. -->
<!-- 2. Each one is run and mapped into -->

<!-- 1. User chooses some or all tests to run. -->

<!-- 1. The user initiates running the tests somehow (lein, repl, whatever). -->
<!-- 2. All tests are searched, required, and possibly filtered. -->
<!-- 3. The ones allowed to run right now are passed to `run-test-fns`. -->
<!-- 4. This function lazily maps each test-fn into a test-result. -->
<!-- 5. It passes this lazy seq to the reporter, which then reports somehow. -->



== test-fn

Any Clojure function in your project that has a truthy `:test`
metadata key is a test-fn. If it has a docstring, that will be
considered its "description" for the reporter.


== assertion-result

An assertion-result is a Clojure map with these keys and values:

:status
  (Required, Keyword)
  :pass if the test passed
  :fail if the assertion failed
  :error *only* if there was an *unexpected* exception

:description
  (Optional, String)
  For the reporter to know what the assertion is testing

:error
  (Required when status is :error, Exception)
  The exception that unexpectedly occurred

:failure-report
  (Required when status is :fail, Map)
  Has the following keys:

    :result
    (Required, any type)
    The result of the assertion

    :fn
    (Required, raw form)
    The literal callable-form that was used in the assertion

    :args
    (Required, seq of any types)
    The args after they were evaluated in the assertion

    :raw-args
    (Required, seq of raw forms)
    The args before they were evaluated in the assertion


== test-result

A test-result is a Clojure map with these keys and values:

:results
  (Required, seq of assertion-results)
  Results of every assertion in the function.

:test
  (Required, Var)
  The test-fn's var.
